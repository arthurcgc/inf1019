Arthur Cavalcante Gomes Coelho - 1313099

Questão 1) Faça um programa em que três processos executam em paralelo as seguintes ações:Pai - Imprime os números de 0 a 99, com um intervalo de 1 segundo entre a impressão de cada número. Após imprimir todos os números, imprime a frase “Processo pai vai finalizar” e finaliza quando o filho terminar.Filho - Imprime os números de 100 a 199, com um intervalo de 2 segundo entre a impressão cada número. Antes de imprimir os números, imprime a frase “Filho foi criado”.Após imprimir todos os números, imprime a frase “processo filho vai finalizar” e finaliza quando o neto terminar.Neto - filho do processo Filho (ou seja, neto do processo Pai). Imprime os números de 200 a 299, com um intervalo de 3 segundos entre cada número. Antes de imprimir os números, imprime a frase “Neto foi criado”.Após imprimir todos os números, imprime a frase “processo neto vai finalizar” e finaliza o processo.Importante: Em cada printf os processos devem imprimir o seu pid e o pid do seu pai.DICA: A chamada ao sistema sleep(1) bloqueia o processo por 1 segundo.Pergunta-se: É possível observar os processos executando em paralelo? Como?
-------------------------------------------------------------------------------------------------------------------------------------------
main.c
#include <stdio.h>
#include <sys/types.h> 
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>


int main()
{
    pid_t child = fork();
    pid_t grand_child;
    pid_t endID;
    int status;

    // if > 0 then, parent
    if(child > 0)   
    {
        for(int i = 0; i < 100; i++)
        {
            printf("count: %d - PID: %d\n", i, getpid());
            sleep(1);
        }
        endID = waitpid(child, &status, 0);
        printf("processo pai vai finalizar\n");
        if(endID == -1)
        {
            perror("\nwaitpid error\n");
            exit(EXIT_FAILURE);
        }
        exit(EXIT_SUCCESS);
    }

    // if child == 0, then child
    else if(child == 0)
    {
        printf("Filho foi criado\n");

        /************************************************ INICIO DO NETO ***************************/
        grand_child = fork();
        if(grand_child == 0)
        {
            printf("Neto foi criado\n");
            for(int i = 200; i < 300; i++)
            {
                printf("count: %d - PID: %d - PID pai: %d\n", i, getpid(), getppid());
                sleep(3);
            }
            printf("Processo neto vai finalizar\n");
            exit(EXIT_SUCCESS);
        }
        /* *************************** FIM DO NETO *************************************************/


        for(int i = 100; i < 200; i++)
        {
            printf("count: %d - PID: %d - PID pai: %d\n", i, getpid(), getppid());
            sleep(2);
        }

        endID = waitpid(grand_child, &status, 0);
        printf("Processo filho vai finalizar\n");
        if(endID == -1)
        {
            perror("\nwaitpid error\n");
            exit(EXIT_FAILURE);
        }
        exit(EXIT_SUCCESS);
    }

    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
gcc -g main.c -o main
./main
-------------------------------------------------------------------------------------------------------------------------------------------
RESULTADO
count: 0 - PID: 25450
Filho foi criado
count: 100 - PID: 25451 - PID pai: 25450
Neto foi criado
count: 200 - PID: 25452 - PID pai: 25451
count: 1 - PID: 25450
count: 2 - PID: 25450
count: 101 - PID: 25451 - PID pai: 25450
count: 201 - PID: 25452 - PID pai: 25451
count: 3 - PID: 25450
count: 4 - PID: 25450
count: 102 - PID: 25451 - PID pai: 25450
count: 5 - PID: 25450
count: 202 - PID: 25452 - PID pai: 25451
count: 103 - PID: 25451 - PID pai: 25450
count: 6 - PID: 25450
count: 7 - PID: 25450
count: 104 - PID: 25451 - PID pai: 25450
count: 8 - PID: 25450
count: 203 - PID: 25452 - PID pai: 25451
count: 9 - PID: 25450
count: 105 - PID: 25451 - PID pai: 25450
count: 10 - PID: 25450
count: 11 - PID: 25450
count: 204 - PID: 25452 - PID pai: 25451
count: 106 - PID: 25451 - PID pai: 25450
count: 12 - PID: 25450
count: 13 - PID: 25450
count: 107 - PID: 25451 - PID pai: 25450
count: 14 - PID: 25450
count: 205 - PID: 25452 - PID pai: 25451
count: 15 - PID: 25450
count: 108 - PID: 25451 - PID pai: 25450
count: 16 - PID: 25450
count: 17 - PID: 25450
count: 206 - PID: 25452 - PID pai: 25451
count: 109 - PID: 25451 - PID pai: 25450
count: 18 - PID: 25450
count: 19 - PID: 25450
count: 110 - PID: 25451 - PID pai: 25450
count: 20 - PID: 25450
count: 207 - PID: 25452 - PID pai: 25451
count: 21 - PID: 25450
count: 111 - PID: 25451 - PID pai: 25450
count: 22 - PID: 25450
count: 23 - PID: 25450
count: 208 - PID: 25452 - PID pai: 25451
count: 112 - PID: 25451 - PID pai: 25450
count: 24 - PID: 25450
count: 25 - PID: 25450
count: 113 - PID: 25451 - PID pai: 25450
count: 26 - PID: 25450
count: 209 - PID: 25452 - PID pai: 25451
count: 27 - PID: 25450
count: 114 - PID: 25451 - PID pai: 25450
count: 28 - PID: 25450
count: 29 - PID: 25450
count: 210 - PID: 25452 - PID pai: 25451
count: 115 - PID: 25451 - PID pai: 25450
count: 30 - PID: 25450
count: 31 - PID: 25450
count: 116 - PID: 25451 - PID pai: 25450
count: 32 - PID: 25450
count: 211 - PID: 25452 - PID pai: 25451
count: 33 - PID: 25450
count: 117 - PID: 25451 - PID pai: 25450
count: 34 - PID: 25450
count: 35 - PID: 25450
count: 212 - PID: 25452 - PID pai: 25451
count: 118 - PID: 25451 - PID pai: 25450
count: 36 - PID: 25450
count: 37 - PID: 25450
count: 119 - PID: 25451 - PID pai: 25450
count: 38 - PID: 25450
count: 213 - PID: 25452 - PID pai: 25451
count: 39 - PID: 25450
count: 120 - PID: 25451 - PID pai: 25450
count: 40 - PID: 25450
count: 41 - PID: 25450
count: 214 - PID: 25452 - PID pai: 25451
count: 121 - PID: 25451 - PID pai: 25450
count: 42 - PID: 25450
count: 43 - PID: 25450
count: 122 - PID: 25451 - PID pai: 25450
count: 44 - PID: 25450
count: 215 - PID: 25452 - PID pai: 25451
count: 45 - PID: 25450
count: 123 - PID: 25451 - PID pai: 25450
count: 46 - PID: 25450
count: 47 - PID: 25450
count: 216 - PID: 25452 - PID pai: 25451
count: 124 - PID: 25451 - PID pai: 25450
count: 48 - PID: 25450
count: 49 - PID: 25450
count: 125 - PID: 25451 - PID pai: 25450
count: 50 - PID: 25450
count: 217 - PID: 25452 - PID pai: 25451
count: 51 - PID: 25450
count: 126 - PID: 25451 - PID pai: 25450
count: 52 - PID: 25450
count: 53 - PID: 25450
count: 218 - PID: 25452 - PID pai: 25451
count: 127 - PID: 25451 - PID pai: 25450
count: 54 - PID: 25450
count: 55 - PID: 25450
count: 128 - PID: 25451 - PID pai: 25450
count: 56 - PID: 25450
count: 219 - PID: 25452 - PID pai: 25451
count: 57 - PID: 25450
count: 129 - PID: 25451 - PID pai: 25450
count: 58 - PID: 25450
count: 59 - PID: 25450
count: 220 - PID: 25452 - PID pai: 25451
count: 130 - PID: 25451 - PID pai: 25450
count: 60 - PID: 25450
count: 61 - PID: 25450
count: 131 - PID: 25451 - PID pai: 25450
count: 62 - PID: 25450
count: 221 - PID: 25452 - PID pai: 25451
count: 63 - PID: 25450
count: 132 - PID: 25451 - PID pai: 25450
count: 64 - PID: 25450
count: 65 - PID: 25450
count: 222 - PID: 25452 - PID pai: 25451
count: 133 - PID: 25451 - PID pai: 25450
count: 66 - PID: 25450
count: 67 - PID: 25450
count: 134 - PID: 25451 - PID pai: 25450
count: 68 - PID: 25450
count: 223 - PID: 25452 - PID pai: 25451
count: 69 - PID: 25450
count: 135 - PID: 25451 - PID pai: 25450
count: 70 - PID: 25450
count: 71 - PID: 25450
count: 224 - PID: 25452 - PID pai: 25451
count: 136 - PID: 25451 - PID pai: 25450
count: 72 - PID: 25450
count: 73 - PID: 25450
count: 137 - PID: 25451 - PID pai: 25450
count: 74 - PID: 25450
count: 225 - PID: 25452 - PID pai: 25451
count: 75 - PID: 25450
count: 138 - PID: 25451 - PID pai: 25450
count: 76 - PID: 25450
count: 77 - PID: 25450
count: 226 - PID: 25452 - PID pai: 25451
count: 139 - PID: 25451 - PID pai: 25450
count: 78 - PID: 25450
count: 79 - PID: 25450
count: 140 - PID: 25451 - PID pai: 25450
count: 80 - PID: 25450
count: 227 - PID: 25452 - PID pai: 25451
count: 81 - PID: 25450
count: 141 - PID: 25451 - PID pai: 25450
count: 82 - PID: 25450
count: 83 - PID: 25450
count: 228 - PID: 25452 - PID pai: 25451
count: 142 - PID: 25451 - PID pai: 25450
count: 84 - PID: 25450
count: 85 - PID: 25450
count: 143 - PID: 25451 - PID pai: 25450
count: 86 - PID: 25450
count: 229 - PID: 25452 - PID pai: 25451
count: 87 - PID: 25450
count: 144 - PID: 25451 - PID pai: 25450
count: 88 - PID: 25450
count: 89 - PID: 25450
count: 230 - PID: 25452 - PID pai: 25451
count: 145 - PID: 25451 - PID pai: 25450
count: 90 - PID: 25450
count: 91 - PID: 25450
count: 146 - PID: 25451 - PID pai: 25450
count: 92 - PID: 25450
count: 231 - PID: 25452 - PID pai: 25451
count: 93 - PID: 25450
count: 147 - PID: 25451 - PID pai: 25450
count: 94 - PID: 25450
count: 95 - PID: 25450
count: 232 - PID: 25452 - PID pai: 25451
count: 148 - PID: 25451 - PID pai: 25450
count: 96 - PID: 25450
count: 97 - PID: 25450
count: 149 - PID: 25451 - PID pai: 25450
count: 98 - PID: 25450
count: 233 - PID: 25452 - PID pai: 25451
count: 99 - PID: 25450
count: 150 - PID: 25451 - PID pai: 25450
count: 234 - PID: 25452 - PID pai: 25451
count: 151 - PID: 25451 - PID pai: 25450
count: 152 - PID: 25451 - PID pai: 25450
count: 235 - PID: 25452 - PID pai: 25451
count: 153 - PID: 25451 - PID pai: 25450
count: 236 - PID: 25452 - PID pai: 25451
count: 154 - PID: 25451 - PID pai: 25450
count: 155 - PID: 25451 - PID pai: 25450
count: 237 - PID: 25452 - PID pai: 25451
count: 156 - PID: 25451 - PID pai: 25450
count: 238 - PID: 25452 - PID pai: 25451
count: 157 - PID: 25451 - PID pai: 25450
count: 158 - PID: 25451 - PID pai: 25450
count: 239 - PID: 25452 - PID pai: 25451
count: 159 - PID: 25451 - PID pai: 25450
count: 240 - PID: 25452 - PID pai: 25451
count: 160 - PID: 25451 - PID pai: 25450
count: 161 - PID: 25451 - PID pai: 25450
count: 241 - PID: 25452 - PID pai: 25451
count: 162 - PID: 25451 - PID pai: 25450
count: 242 - PID: 25452 - PID pai: 25451
count: 163 - PID: 25451 - PID pai: 25450
count: 164 - PID: 25451 - PID pai: 25450
count: 243 - PID: 25452 - PID pai: 25451
count: 165 - PID: 25451 - PID pai: 25450
count: 244 - PID: 25452 - PID pai: 25451
count: 166 - PID: 25451 - PID pai: 25450
count: 167 - PID: 25451 - PID pai: 25450
count: 245 - PID: 25452 - PID pai: 25451
count: 168 - PID: 25451 - PID pai: 25450
count: 246 - PID: 25452 - PID pai: 25451
count: 169 - PID: 25451 - PID pai: 25450
count: 170 - PID: 25451 - PID pai: 25450
count: 247 - PID: 25452 - PID pai: 25451
count: 171 - PID: 25451 - PID pai: 25450
count: 248 - PID: 25452 - PID pai: 25451
count: 172 - PID: 25451 - PID pai: 25450
count: 173 - PID: 25451 - PID pai: 25450
count: 249 - PID: 25452 - PID pai: 25451
count: 174 - PID: 25451 - PID pai: 25450
count: 250 - PID: 25452 - PID pai: 25451
count: 175 - PID: 25451 - PID pai: 25450
count: 176 - PID: 25451 - PID pai: 25450
count: 251 - PID: 25452 - PID pai: 25451
count: 177 - PID: 25451 - PID pai: 25450
count: 252 - PID: 25452 - PID pai: 25451
count: 178 - PID: 25451 - PID pai: 25450
count: 179 - PID: 25451 - PID pai: 25450
count: 253 - PID: 25452 - PID pai: 25451
count: 180 - PID: 25451 - PID pai: 25450
count: 254 - PID: 25452 - PID pai: 25451
count: 181 - PID: 25451 - PID pai: 25450
count: 182 - PID: 25451 - PID pai: 25450
count: 255 - PID: 25452 - PID pai: 25451
count: 183 - PID: 25451 - PID pai: 25450
count: 256 - PID: 25452 - PID pai: 25451
count: 184 - PID: 25451 - PID pai: 25450
count: 185 - PID: 25451 - PID pai: 25450
count: 257 - PID: 25452 - PID pai: 25451
count: 186 - PID: 25451 - PID pai: 25450
count: 258 - PID: 25452 - PID pai: 25451
count: 187 - PID: 25451 - PID pai: 25450
count: 188 - PID: 25451 - PID pai: 25450
count: 259 - PID: 25452 - PID pai: 25451
count: 189 - PID: 25451 - PID pai: 25450
count: 260 - PID: 25452 - PID pai: 25451
count: 190 - PID: 25451 - PID pai: 25450
count: 191 - PID: 25451 - PID pai: 25450
count: 261 - PID: 25452 - PID pai: 25451
count: 192 - PID: 25451 - PID pai: 25450
count: 262 - PID: 25452 - PID pai: 25451
count: 193 - PID: 25451 - PID pai: 25450
count: 194 - PID: 25451 - PID pai: 25450
count: 263 - PID: 25452 - PID pai: 25451
count: 195 - PID: 25451 - PID pai: 25450
count: 264 - PID: 25452 - PID pai: 25451
count: 196 - PID: 25451 - PID pai: 25450
count: 197 - PID: 25451 - PID pai: 25450
count: 265 - PID: 25452 - PID pai: 25451
count: 198 - PID: 25451 - PID pai: 25450
count: 266 - PID: 25452 - PID pai: 25451
count: 199 - PID: 25451 - PID pai: 25450
count: 267 - PID: 25452 - PID pai: 25451
count: 268 - PID: 25452 - PID pai: 25451
count: 269 - PID: 25452 - PID pai: 25451
count: 270 - PID: 25452 - PID pai: 25451
count: 271 - PID: 25452 - PID pai: 25451
count: 272 - PID: 25452 - PID pai: 25451
count: 273 - PID: 25452 - PID pai: 25451
count: 274 - PID: 25452 - PID pai: 25451
count: 275 - PID: 25452 - PID pai: 25451
count: 276 - PID: 25452 - PID pai: 25451
count: 277 - PID: 25452 - PID pai: 25451
count: 278 - PID: 25452 - PID pai: 25451
count: 279 - PID: 25452 - PID pai: 25451
count: 280 - PID: 25452 - PID pai: 25451
count: 281 - PID: 25452 - PID pai: 25451
count: 282 - PID: 25452 - PID pai: 25451
count: 283 - PID: 25452 - PID pai: 25451
count: 284 - PID: 25452 - PID pai: 25451
count: 285 - PID: 25452 - PID pai: 25451
count: 286 - PID: 25452 - PID pai: 25451
count: 287 - PID: 25452 - PID pai: 25451
count: 288 - PID: 25452 - PID pai: 25451
count: 289 - PID: 25452 - PID pai: 25451
count: 290 - PID: 25452 - PID pai: 25451
count: 291 - PID: 25452 - PID pai: 25451
count: 292 - PID: 25452 - PID pai: 25451
count: 293 - PID: 25452 - PID pai: 25451
count: 294 - PID: 25452 - PID pai: 25451
count: 295 - PID: 25452 - PID pai: 25451
count: 296 - PID: 25452 - PID pai: 25451
count: 297 - PID: 25452 - PID pai: 25451
count: 298 - PID: 25452 - PID pai: 25451
count: 299 - PID: 25452 - PID pai: 25451
Processo neto vai finalizar
Processo filho vai finalizar
processo pai vai finalizar
-------------------------------------------------------------------------------------------------------------------------------------------
CONCLUSÃO
>Como pode-se observar no output do programa, os PIDs dos três processos estão coerentes: pai-> 25450, filho-> 25451, neto-> 25452 assim como os PIDs dos pais dos dois filhos;
PID do pai do primeiro dilho pode ser observado, por exemplo, na linha: >count: 155 - PID: 25451 - PID pai: 25450
PID do pai do neto (que é o filho do primeiro pai) pode ser observado, por exemplo, na linha: >count: 299 - PID: 25452 - PID pai: 25451
Podemos observar os processos sendo executados em paralelo se depurarmos o programa e colocarmos um BreakPoint em algum dos ifs que iniciam a execução de algum dos processos. 
No código primeiro checamos se a variavel child que quarda o PID do processo filho é maior do que zero, se for maior que zero significa que estamos no processo pai e executamos as instruções do pai.
O processo é então repetido para o filho e para o filho do filho. Uma observação pertinente a ser feita é que para criarmos de fato um "neto" do processo original devemos realizar o fork dentro do processo filho.
Pelo que entendi do enunciado foi pedido para que todos os processo se encerrassem ao mesmo tempo, então no fim dos ifs foi inserido o waitpid() com o PID dos processos que devem ser aguardados.
-------------------------------------------------------------------------------------------------------------------------------------------


QUESTÃO 2) Implemente os seguintes programas: o primeiro exibe a mensagem “alo mundo!”, o segundo implementa o programa echo do Unix, que exibe no terminal os argumentos do programa. Compile estes programas. Elabore um programa que crie e execute os dois programas que você escreveu: o alomundo e o echo. Utilize alguma função da família "execv" para realizar esta atividade.DICA: Para saber os protótipos das funções disponíveis execute o comando “man” no Terminal (para acessar o manual: "man execv").Pergunta1: O que você observou em termos de semelhanças e diferenças para executar o alomundo e o echo?Pergunta2: Indique como você decidiu implementar os programas. Há concorrência? Há hierarquia entre os processos? Explique.
-------------------------------------------------------------------------------------------------------------------------------------------
ola.c
#include <stdio.h>
#include <sys/types.h> 
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

int main(int argc, char const *argv[])
{
    printf("Ola Mundo!\n");
        
    return 0;
}

echoc.c
#include <stdio.h>
#include <sys/types.h> 
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

int main(int argc, char const *argv[])
{
    if(argc < 2)
        return (EXIT_FAILURE);
    for(int i = 1; i < argc;  i++)
        printf("%s ", argv[i]);
    printf("\n");
    return 0;
}

exec_tasks.c
#include <stdio.h>
#include <sys/types.h> 
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

int main(int argc, char const *argv[])
{
    char *parmList1[] = {"echoc" ,"arthur coelho", 0};
    char *parmList2[] = {"ola", 0};

    pid_t child = fork();
    
    if(child == 0)
        execv(parmList1[0], parmList1);
    else
        execv(parmList2[0], parmList2);

    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------
COMPILAÇÃO E EXECUÇÃO 
1) gcc -g -o ola ola.c
2) gcc -g -o echoc echoc.c
3) gcc -g -o exec_tasks exec_tasks.c

4) ./exec_tasks
-------------------------------------------------------------------------------------------------------------------------------------------
RESULTADO
Ola Mundo!
arthur coelho 
-------------------------------------------------------------------------------------------------------------------------------------------
CONCLUSÃO
Os dois programas compilados inicialmente são elementares e auto-explicativos. Já no terceiro programa é necessário criar um processo filho para executar duas vezes a instrução execv.
Resposta1) Para executar o programa echoc é necessário que seja inserido um parametro na execução do programa para reproduzir na tela o que foi digitado. A execução do ola é elementar. É importante notar que é
imperativo que a main do echoc deve possuir os argumentos argc e argv para poder se obter os parametros do programa, já no ola isso não é necessário.
Resposta2) O programa ola é básico, o echoc é necessario realizar o parsing dos argumentos poré sua execução é bem simples. No exec_tasks foi necessário utilizar concorrencia para se executar duas vezes a
instrução execv. Há sim hierarquia no exec_tasks, o processo que executa o echoc é pai do processo que executa o ola.

















