Arthur Cavalcante Gomes Coelho - 1313099
Marcos Vinícius Porto de Sá - 1413428
QUESTÃO 1) Faça programas para alterar e exibir um valor de uma variável na memória compartilhada.
Um programa soma 1 à variável e o outro soma 5 à variável.
Execute o programa e verifique se houve problema de concorrência.
Agora utilize semáforos para possibilitar alterar a variável (região crítica).
Descreva o que ocorreu.
---------------------------------------------------------------------------------------------------------- 
main.c
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>


union semun
{
    int val; // valor do semáforo
    struct semid_ds *buf; // operação do semáforo
    unsigned short *array; // flags da operação
};

// inicializa o valor do semáforo
int setSemValue(int semId)
{
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

// remove o semáforo
void delSemValue(int semId)
{
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

// operação P
int semaforoP(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

//operação V
int semaforoV(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

int main(int argc, char *argv[])
{
    int segmento, *p, id, pid, status;
    int semId;
    // aloca a memória compartilhada
    segmento = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
    // associa a memória compartilhada ao processo
    p = (int *)shmat(segmento, 0, 0); // comparar o retorno com -1
    *p = 0;
    semId = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT);
    setSemValue(semId);
    if ((id = fork()) < 0)
    {
        puts("Erro na criação do novo processo");
        exit(-2);
    }
    else if (id == 0)
    {
        printf("[Processo filho] p inicial = %d\n", *p);
        semaforoP(semId);
        for(int i = 0; i < 10; i++)
        {
            *p += 1;
            sleep(1);
            printf("%d ", *p);fflush(stdout);
        }
        printf("\n");        
        semaforoV(semId);
    }
    else
    {
        printf("[Processo pai] p inicial = %d\n", *p);
        semaforoP(semId);
        for(int i = 0; i < 10; i++)
        {
            *p += 5;
            sleep(2);
            printf("%d ", *p);fflush(stdout);
        }
        printf("\n");        
        semaforoV(semId);
    }
    delSemValue(semId);    
    // libera a memória compartilhada do processo
    shmdt(p);
    // libera a memória compartilhada
    int i = shmctl(segmento, IPC_RMID, 0);
    return 0;
}
----------------------------------------------------------------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
gcc -o main main.c
./main
---------------------------------------------------------------------------------------------------------- 
RESULTADO
[Processo pai] p inicial = 0
[Processo filho] p inicial = 0
5 10 15 20 25 30 35 40 45 50 
51 52 53 54 55 56 57 58 59 60
---------------------------------------------------------------------------------------------------------- 
CONCLUSÃO 
Com a presença de semáforos os processos não apresentaram concorrência, o processo que foi
executado primeiro protegeu a região crítica e fez as suas alterações, após a liberação da região crítica
o segundo processo é capaz de realizar alterações na região crítica. Podemos observar esse comportamento no output
do programa, a região crítica (loop no ponteiro *p) é protegida e soma 1 ou 5 dependendo do primeiro processo a
ser executado e depois libera a região para o outro processo somar 1 ou 5 na variável.
---------------------------------------------------------------------------------------------------------- 
QUESTÃO 2) Produtor-Consumidor
Escreva um programa formado por dois processos concorrentes, produtor e consumidor,
que compartilham uma área de trabalho (memória) executando um loop de tamanho 64.
Para sincronizar as suas ações, eles fazem uso de semáforos. O processo leitor fica lendo caracteres da entrada
padrão e colocando em um buffer de 16 posições, o processo consumidor deve imprimir os caracteres na saída padrão.
Há concorrência entre os processos produtor e consumidor.
---------------------------------------------------------------------------------------------------------- 
main.c
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <string.h>

#define MAX_CHAR 16
#define MAX_ITER 64

union semun
{
    int val; // valor do semáforo
    struct semid_ds *buf; // operação do semáforo
    unsigned short *array; // flags da operação
};

// inicializa o valor do semáforo
int setSemValue(int semId)
{
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

// remove o semáforo
void delSemValue(int semId)
{
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

// operação P
int semaforoP(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

//operação V
int semaforoV(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

int main(int argc, char *argv[])
{
    int segmento, *p, id, pid, status;
    char *buffer = (char*)malloc(sizeof(char)*MAX_CHAR); 
    int semId;
    // aloca a memória compartilhada
    segmento = shmget(IPC_PRIVATE, sizeof(char)*MAX_CHAR, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
    // associa a memória compartilhada ao processo
    buffer = (char *)shmat(segmento, 0, 0); // comparar o retorno com -1
    semId = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT);
    setSemValue(semId);

    if ((id = fork()) < 0)
    {
        puts("Erro na criação do novo processo");
        exit(-2);
    }
    else if (id == 0)
    {
        // consumidor, aka filho
        for(int i = 0; i < MAX_ITER; i++)
        {
            semaforoP(semId);
            printf("%s\n", buffer);
            memset(buffer, 0, sizeof(buffer));
            semaforoV(semId);
        }
    }
    else
    {
        // produtor, aka pai
        for(int i = 0; i < MAX_ITER; i++)
        {
            semaforoP(semId);
            for(int j = 0; j <= MAX_CHAR; j++)
                buffer[j] = getchar();
            
            semaforoV(semId);
        }
    }

    delSemValue(semId);
    // libera a memória compartilhada do processo
    //era p
    shmdt(buffer);
    // libera a memória compartilhada
    int i = shmctl(segmento, IPC_RMID, 0);
    return 0;
}
----------------------------------------------------------------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
gcc -o main main.c
./main
---------------------------------------------------------------------------------------------------------- 
RESULTADO
<stdin>  1234567812345678
<stdout> 1234567812345678

<stdin>  8765432187654321
<stdout> 8765432187654321

<stdin>  hasghgsahgfsgsga
<stdout> hasghgsahgfsgsga

<input>  bvhshv dsbJBVSJD
<output> bvhshv dsbJBVSJD

---------------------------------------------------------------------------------------------------------- 
CONCLUSÃO 
O processo filho faz a leitura contínua do stdin, quando o stdin recebe um input, a região crítica é reservada
para a formulação do buffer. Assim que o buffer é preenchido a região crítica é liberada e faz com que o processo
pai acesse-a, quando o processo pai tem o acesso ao buffer ele protege a região crítica e imprime seus conteúdos
no stdout, uma vez finalizada a etapa de impressão do buffer a região crítica é liberada, onde o processo filho
recomeça a etapa de leitura e armazenamento do stdin.
---------------------------------------------------------------------------------------------------------- 
QUESTÃO 3) Faça programas que utilizam a memória compartilhada para trocar mensagens.
Utilize semáforos para sincronizar a aplicação
---------------------------------------------------------------------------------------------------------- 
main.c
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>


int main(int argc, char const *argv[])
{
    pid_t pid;
    char *const parmlist1[] = {"./msg1", NULL};
    char *const parmlist2[] = {"./msg2", NULL};

    pid = fork();

    if(pid == 0)
    {
        execv("./msg2", parmlist1);
    }
    else if(pid > 0)
    {
        execv("./msg1", parmlist2);
    }


    return 0;
}
---------------------------------------------------------------------------------------------------------- 
msg1.c
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <string.h>

union semun
{
    int val; // valor do semáforo
    struct semid_ds *buf; // operação do semáforo
    unsigned short *array; // flags da operação
};

// inicializa o valor do semáforo
int setSemValue(int semId)
{
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

// remove o semáforo
void delSemValue(int semId)
{
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

// operação P
int semaforoP(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

//operação V
int semaforoV(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

int main(int argc, char const *argv[])
{
    int segmento, id, pid, status;
    char *letter;
    int semId;
    int i;


    // aloca a memória compartilhada
    segmento = shmget(8732, sizeof(char*), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
    // associa a memória compartilhada ao processo
    letter = (char*)shmat(segmento, 0, 0); // comparar o retorno com -1
    semId = semget(8752, 1, 0666 | IPC_CREAT);
    setSemValue(semId);

    *letter = '/';
    while(*letter != '.')
    {
        semaforoP(semId);
        scanf(" %c", letter);
        semaforoV(semId);
    }

    delSemValue(semId);
    // libera a memória compartilhada do processo
    shmdt(letter);
    // libera a memória compartilhada
    i = shmctl(segmento, IPC_RMID, 0);

    return 0;
}
----------------------------------------------------------------------------------------------------------
msg2.c
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <string.h>

union semun
{
    int val; // valor do semáforo
    struct semid_ds *buf; // operação do semáforo
    unsigned short *array; // flags da operação
};

// inicializa o valor do semáforo
int setSemValue(int semId)
{
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

// remove o semáforo
void delSemValue(int semId)
{
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

// operação P
int semaforoP(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

//operação V
int semaforoV(int semId)
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

int main(int argc, char const *argv[])
{
    int segmento, *p, id, pid, status;
    char *letter;
    int semId;

    // aloca a memória compartilhada
    segmento = shmget(8732, sizeof(char*), IPC_EXCL | S_IRUSR | S_IWUSR);
    // associa a memória compartilhada ao processo
    letter = (char*)shmat(segmento, 0, 0); // comparar o retorno com -1
    semId = semget(8752, 1, 0666);
    setSemValue(semId);

    while(*letter != '.')
    {
        semaforoP(semId);
        printf("%c\n", *letter + 1);
        semaforoV(semId);
        sleep(2);
    }


    delSemValue(semId);
    // libera a memória compartilhada do processo
    shmdt(p);
    // libera a memória compartilhada
    int i = shmctl(segmento, IPC_RMID, 0);

    return 0;
}

----------------------------------------------------------------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
gcc -o main main.c
gcc -o msg1 msg1.c
gcc -o msg2 msg2.c
./main
----------------------------------------------------------------------------------------------------------  
RESULTADO
 ./main
/
/
<input>  a
<output> a
<output> a
<output> a
<input>  b
<output> b
<output> b
<output> b
<output> b
<output> b
<input>  c
<output> c
<output> c
<input>  .

---------------------------------------------------------------------------------------------------------- 
CONCLUSÃO 
O programa msg1.c é encarregado de criar uma memória compartilhada que deve guardar uma variável do tipo char,
o valor inicial dessa variável é '\', até que o usuário digite no terminal o novo valor corrente da variavel,
uma vez digitado o novo valor da variável msg1.c protege a região crítica e altera o valor da variável, assim
que seu valor é alterado msg1.c libera a região crítica e msg2.c passa a imprimir o valor corrente presente na
variável de memória compartilhada com intervalo de 1 segundo.
---------------------------------------------------------------------------------------------------------- 